#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt

# Use matplotlib to generate the graphic for the 
# http://www.physics-geek.us discussion on transverse waves

# Using double sided gaussian to show path of the plucked of the string
x = np.linspace(-1, 15, 512)

f = np.piecewise(x, 
[x < 8, x >=8],
[lambda x: (5/(np.sqrt(2*np.pi)))*(np.exp(-((x-8)**2/20)))-0.05,
lambda x: (4/(np.sqrt(2*np.pi)))*(np.exp(-((x-8)**2/15)))+0.35])

# The tension vector in the positive direction.

tp = 

# The tension vector in the negative direction.

tn = 

# set up the plotting space

fig = plt.figure()
ax = fig.add_subplot(111)

# Plot the path of the string
ax.plot(x, f)

# The code for removing the axis and replacing with arrows came from
# https://github.com/Felix11H/axis_arrowheads
# Used with permission from Felix

xmin, xmax = ax.get_xlim() 
ymin, ymax = ax.get_ylim()


# removing the default axis on all sides:
for side in ['bottom','right','top','left']:
    ax.spines[side].set_visible(False)
 
# removing the axis ticks
plt.xticks([]) # labels 
plt.yticks([])
ax.xaxis.set_ticks_position('none') # tick markers
ax.yaxis.set_ticks_position('none')
 
# wider figure for demonstration
fig.set_size_inches(4,2.2)
 
# get width and height of axes object to compute 
# matching arrowhead length and width
dps = fig.dpi_scale_trans.inverted()
bbox = ax.get_window_extent().transformed(dps)
width, height = bbox.width, bbox.height
 
# manual arrowhead width and length
hw = 1./20.*(ymax-ymin) 
hl = 1./20.*(xmax-xmin)
lw = 1. # axis line width
ohg = 0.3 # arrow overhang
 
# compute matching arrowhead length and width
yhw = hw/(ymax-ymin)*(xmax-xmin)* height/width 
yhl = hl/(xmax-xmin)*(ymax-ymin)* width/height
 
# draw x and y axis
ax.arrow(xmin, 0, xmax-xmin, 0., fc='k', ec='k', lw = lw, 
         head_width=hw, head_length=hl, overhang = ohg, 
         length_includes_head= True, clip_on = False) 
 
ax.arrow(0, ymin, 0., ymax-ymin, fc='k', ec='k', lw = lw, 
         head_width=yhw, head_length=yhl, overhang = ohg, 
         length_includes_head= True, clip_on = False) 
plt.show()
